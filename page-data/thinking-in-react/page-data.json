{"componentChunkName":"component---src-templates-blog-post-js","path":"/thinking-in-react/","result":{"data":{"site":{"siteMetadata":{"title":"Aman's Blog","author":"Amandeep Singh"}},"markdownRemark":{"id":"949e45af-1e1c-56f3-86ee-a43202caa265","excerpt":"I have been using React for two years now. I must say the journey so far was exciting and has taught me many things. My first React learning resource was a…","html":"<p>I have been using React for two years now. I must say the journey so far was exciting and has taught me many things. My first React learning resource was a YouTube Video and a book named <a href=\"http://reactessentials.com/\">React Essentials</a>. Since then, I have worked on a few projects and observed how it can change your life as a programmer.</p>\n<p><strong>React</strong> is a <a href=\"https://en.wikipedia.org/wiki/Declarative_programming\">declarative</a> JavaScript library for building user interfaces. What I mean by declarative is that it does what you tell it to do, rather than describing control flow. Learning React can be fun and challenging at the same time. The great power lies in using the React concept the right way. React documentation has a nice <a href=\"https://reactjs.org/docs/thinking-in-react.html\">article</a> about the thought process of building apps which I recommend.</p>\n<p>Through this article I would like to share some of the things I learned and hope you may find them helpful.</p>\n<h3>1. Looking At The Bigger Picture</h3>\n<p>There’s always a big emphasis on creating React Components which can be reusable, maintainable and easy to test. For beginners it’s always very tempting to dump all the rendering logic into one big component. I think that’s how we all started to learn React. But, as our mind power grows, we can see this is not how it’s meant to be done.</p>\n<p>Here are few things we can do before we start writing code:</p>\n<ul>\n<li>Divide the bigger UI into tiny pieces. There will always be a pattern of child components nested inside parent (container) components.</li>\n<li>Look for UI parts which are being used in more than one place within the application.</li>\n<li>See if they can live independently which means checking if they own their state or it’s being provided by their parent component.</li>\n<li>If they can live independently, try to see what are the rendering and event handling requirements.</li>\n</ul>\n<h3>2. React PropTypes — your best friend</h3>\n<p>I personally love React’s built-in typechecking feature as it gives me confidence about getting my components to render properly. But, I have seen beginner developers abusing it to the level where its values is completely lost.</p>\n<p>For example, let’s create a component called <em>ComponentA</em> which passes its state as props to <em>ComponentB</em> (child component) which also forwards some slice of that props to <em>ComponentC</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> someArbitraryObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"object has no name\"</span><span class=\"token punctuation\">,</span>\n  someArray<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      color<span class=\"token operator\">:</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span>\n      value<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        nestedValue<span class=\"token operator\">:</span> <span class=\"token number\">20</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      color<span class=\"token operator\">:</span> <span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">,</span>\n      value<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        nestedValue<span class=\"token operator\">:</span> <span class=\"token number\">10</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  someObject<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    age<span class=\"token operator\">:</span> <span class=\"token number\">20</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  objectContainingArray<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    values<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// somewhere in render function of ComponentA</span>\n<span class=\"token operator\">&lt;</span>ComponentB values <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>someArbitraryObj<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<br/>\n<p>As we can see the structure of the props <strong>‘values’</strong> is complex. The temptation while creating the componentB would be to create static propTypes like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// inside ComponentB (wrong way of using type checking)</span>\n<span class=\"token keyword\">static</span> propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  values<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>object\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<p>As we know everything in JavaScript(JS) is an object. So, by doing the above, we lose the benefit of props type checking. To leverage the power of <a href=\"https://reactjs.org/docs/typechecking-with-proptypes.html\">React’s built-in typechecking</a> ability and to catch most of bugs (via JS console), we can use some validators to ensure valid data is provided. In our case, we can check the validity of nested properties as well. Let’s see that in action:</p>\n<p><strong>ComponentB:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> object<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">,</span> shape<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> arrayOf<span class=\"token punctuation\">,</span> number <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"prop-types\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// inside ComponentB</span>\n<span class=\"token keyword\">static</span> propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    values<span class=\"token operator\">:</span> <span class=\"token function\">shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n      someArray<span class=\"token operator\">:</span> <span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          id<span class=\"token operator\">:</span> number<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span> <span class=\"token comment\">// if passed props doens't have this id,</span>\n          <span class=\"token comment\">// you will see console warning and thus helps you to identify</span>\n          <span class=\"token comment\">// problem in advance.</span>\n          color<span class=\"token operator\">:</span> string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n          value<span class=\"token operator\">:</span> <span class=\"token function\">shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            nestedValue<span class=\"token operator\">:</span> number\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isRequired\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      someObject<span class=\"token operator\">:</span> <span class=\"token function\">shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        age<span class=\"token operator\">:</span> number\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      objectContainingArray<span class=\"token operator\">:</span> <span class=\"token function\">shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        values<span class=\"token operator\">:</span> <span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>ComponentC list<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>someArray<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<p><strong>ComponentC:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> arrayOf<span class=\"token punctuation\">,</span> shape<span class=\"token punctuation\">,</span> number <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"prop-types\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> map <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"lodash\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ComponentC</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">,</span> <span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>h3 key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>el<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        color<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>el<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">}</span> <span class=\"token operator\">--</span><span class=\"token operator\">-</span> value<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>el<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>nestedValue<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>list<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nComponentC<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  list<span class=\"token operator\">:</span> <span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> number<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n      value<span class=\"token operator\">:</span> <span class=\"token function\">shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        nestedValue<span class=\"token operator\">:</span> number<span class=\"token punctuation\">.</span>isRequired\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nComponentC<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  list<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// empty array</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ComponentC<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now by using validators for the deeply nested properties, we can be sure that when valid object is provided, our components will render properly.</p>\n<p>Try changing the id <em>1</em> to <em>‘someString’</em> and you can see a few JS console warnings indicating invalid prop supplied.</p>\n<blockquote>\n<p><strong>Bonus Tip:</strong> You can create a separate .js file to contain your custom prop types\nand export them where ever you want instead of writing them all over again.</p>\n</blockquote>\n<h3>3. Understanding setState a Litte further</h3>\n<p>You might have heard lots of talk about which React lifecycle hook to be used for calling setState. As this function is the core of React, it’s important to understand what happens when you call this function.</p>\n<ul>\n<li>You can see setState as more of requesting React to set new state for the component rather than synchronously doing it.</li>\n<li>React has its own algorithm of batching the requests and flushing the state update at the end of browser events.</li>\n<li>Don’t rely on this.state to reflect new values immediately after calling <em>setState</em>. If you intend to do so, pass an updater function instead of an object if you need to compute values based on the current state.</li>\n<li>When you pass updater function inside <em>setState</em> call, it allows you to access the current state.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>PureComponent</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token comment\">// initial state</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">handleIncrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// as increment count depends on previous count value,</span>\n    <span class=\"token comment\">// we should use updater function</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      count<span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Counter value is<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleIncrement<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Increment<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>4. One Job per Component</h3>\n<p>You can embed few lines of logic in your render function which is alright. But, I always find it easy to divide the logic and delegate that to other component if render function starts to look messy. Let’s see that in example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Inside parent component</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    isLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    posts<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    isErrorLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    error<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// rendering logic handles by Parent Component (if statements)</span>\n  <span class=\"token comment\">// but the actual rendering job is handled by nested components</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// LoadingComponent is resuable and can be used</span>\n    <span class=\"token comment\">// anywhere in the application</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isLoading<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>LoadingComponent <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isErrorLoading<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>ErrorLoadingComponent error<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token comment\">/* some component */</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>5. Using componentWillUnmount wisely</h3>\n<p>You might have encountered an error in console saying <em>“can’t call setState on unmounted component”</em> and have spent some time struggling to find the root cause. It’s frustrating.</p>\n<blockquote>\n<p>Always remember to clean things before you leave</p>\n</blockquote>\n<p>let say you invoked asynchronous setTimeout call in componentDidMount and when callback invokes, you are setting the state:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        value<span class=\"token operator\">:</span> <span class=\"token number\">20</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now for some reason, if the component is unmounted (manually) before the callback invokes, we are still keeping a reference to component instance via this in <em>setTimeout</em>. And thus garbage collector won’t remove it from the memory and <em>this.setState</em> would still be a valid call causing the error to pop out. Let see how we can fix this problem.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// checking if component hasn't been unmounted and</span>\n        <span class=\"token comment\">// thus it's safe to call setState</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isUnMounted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">         <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        value<span class=\"token operator\">:</span> <span class=\"token number\">20</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isUnMounted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Hope this was helpful. Happy coding 😃.</p>","frontmatter":{"title":"Thinking in React—few tips","date":"April 08, 2018","description":"Some tips to help you get started with React."}}},"pageContext":{"slug":"/thinking-in-react/","previous":null,"next":{"fields":{"slug":"/purecomponent-caveats/"},"frontmatter":{"title":"PureComponent Caveats"}}}}}