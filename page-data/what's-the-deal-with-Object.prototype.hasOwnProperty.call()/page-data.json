{"componentChunkName":"component---src-templates-blog-post-js","path":"/what's-the-deal-with-Object.prototype.hasOwnProperty.call()/","result":{"data":{"site":{"siteMetadata":{"title":"Aman's Blog","author":"Amandeep Singh"}},"markdownRemark":{"id":"bebfc306-d046-5e19-af07-1632d53b6e57","excerpt":"I am sure you might have seen the following line of code either while reading someone’s code or in a library. And now you are wondering what on earth this code…","html":"<p>I am sure you might have seen the following line of code either while reading someone’s code or in a library.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>objRef<span class=\"token punctuation\">,</span> <span class=\"token string\">'propName'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And now you are wondering what on earth this code is doing. You start doubting your JavaScript skills. Don’t worry. You are at the right place.</p>\n<p>I have chosen this piece of code for a few purposes, and by demystifying this, we will understand the following things: </p>\n<ol>\n<li>What is Object.prototype?</li>\n<li>How an object can borrow a function without implementing it or having it in its prototype chain?</li>\n<li>Why do we access <code class=\"language-text\">hasOwnProperty</code> on the Object’s prototype and <strong>not</strong> on the instance itself?</li>\n</ol>\n<p>If this sounds intriguing to you, let’s get started. </p>\n<h3>1. Object.prototype</h3>\n<p><a href=\"https://medium.com/javascript-scene/the-two-pillars-of-javascript-ee6f3281e7f3\"><strong>Prototypal inheritance</strong></a> is one of the main pillars of JavaScript language which allows an object to inherit methods and properties on its prototype. You can think of the prototype as a template.</p>\n<blockquote>\n<p>Prototypal inheritance allows an object to inherit methods and properties on its prototype.</p>\n</blockquote>\n<p>It’s better to understand with an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'aman'</span><span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>‘name’<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// returns true</span></code></pre></div>\n<p>As you see, we haven’t defined any <code class=\"language-text\">hasOwnProperty</code> on our <code class=\"language-text\">obj</code> object but we managed to invoke it. How is it possible? 🤔</p>\n<p>This is possible due to the <strong>prototypal inheritance</strong> and the way <strong>prototype chain</strong> works.  Let’s dig a bit deeper. </p>\n<p>When we created our literal object <code class=\"language-text\">obj</code>, its <em>prototype</em> was set to <strong>Object.prototype</strong>. To verify we can see:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeof</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// returns true</span></code></pre></div>\n<p>[[Prototype]] is an inheritance relationship between objects. In our case, it’s the relation between the <em>obj</em> and Object’s <em>prototype</em>.  </p>\n<p>The prototype chain looks like: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Prototype chain</span>\nobj —<span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype ——<span class=\"token operator\">></span> <span class=\"token keyword\">null</span></code></pre></div>\n<p>When we try to access a property on an object, the interpreter first looks for it on the object itself. If it couldn’t find the property on the object, it will traverse up until it finds the property in the chain. </p>\n<p>Thus, when we invoked <code class=\"language-text\">hasOwnProperty()</code>, the interpreter couldn’t find it on the <code class=\"language-text\">obj</code>, so it traverses up in the chain and finds it on <strong>Object.prototype</strong>.</p>\n<p>Additionally, We can set up or override the prototype chain however we want by using <strong>Object.setPrototypeOf()</strong> method or by using <strong>Object.create()</strong>. </p>\n<p>Consider this example: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'peter'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> PersonPrototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token function-variable function\">getName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">// Setting person's prototype </span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span> PersonPrototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Trying to access getName() method will cause a prototype chain lookup (aka prototype delegation) </span>\n<span class=\"token comment\">// and finds it on PersonPrototype. </span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'peter'</span></code></pre></div>\n<h3>2. Borrowing a function</h3>\n<p>Let’s imagine If I have a following function and an object: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Greetings </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'peter'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>How would you make the object <code class=\"language-text\">a</code> borrow <code class=\"language-text\">sayHello</code>, and invoke the correct <em>name</em> in the greetings? We don’t want <code class=\"language-text\">a</code> to implement <code class=\"language-text\">sayHello</code> or have it anywhere on its prototye chain. 🤔</p>\n<p>The answer is via <code class=\"language-text\">call</code> and <code class=\"language-text\">apply</code> method available on <strong>Function.prototype</strong>. </p>\n<p>In JavaScript, every function we create inherits from <strong>Function.prototype</strong>.\nAnd as we have just learned that via prototype chain, we can use <em>call</em> method on all function objects. 💡</p>\n<blockquote>\n<p>In JavaScript, every function we create inherits from Function.prototype. </p>\n</blockquote>\n<p>The syntax of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\">call method</a> is: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 'call' method is available on Function.prototype</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>objRef<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </code></pre></div>\n<p>The first argument is an object who wants to borrow this function followed by the list of arguments for that function.</p>\n<p>So, for <em>a</em> to borrow <code class=\"language-text\">sayHello</code>, all we have to do is use <code class=\"language-text\">call</code> method on <code class=\"language-text\">sayHello</code> passing <em>a</em> as an argument: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">sayHello</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Greetings peter </span></code></pre></div>\n<hr>\n<h3>3. Object.prototype.hasOwnProperty vs instance.hasOwnProperty</h3>\n<p>After a lightweight tutorial on Prototypal inheritance and borrowing functions, finally, it’s time to demystify why one would use <em>hasOwnProperty</em> on the <em>Object.prototype</em> and not on the object instance.</p>\n<p>As we mentioned above that we can control the prototype chain ourselves. One way is to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\">Object.create()</a> method while creating Object instance. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Object.create() accepts an argument which becomes</span>\n<span class=\"token comment\">// the prototype for newly created object.</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Setting `null` as prototype for 'a'. </span>\n\n<span class=\"token comment\">// Adding a 'name' property on the instance</span>\na<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'peter'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Using `hasOwnProperty` method would cause an error</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//🚫 throws a TypeError: a.hasOwnProperty is not a function</span></code></pre></div>\n<p>Trying to invoke <code class=\"language-text\">hasOwnProperty</code> throws an error as there’s no such method available on the object or its prototype chain. The prototype chain was like: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Prototype chain</span>\na <span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token keyword\">null</span></code></pre></div>\n<p>You may be wondering why someone would create an object like this. But the irony is that in JavaScript you are allowed to be as crazy as you want 🔥. </p>\n<p>Imagine you are creating a library and exposing a function that accepts an object as an argument. If your function makes use of <code class=\"language-text\">hasOwnProperty</code> directly on the object being passed from outside, it could break your code if someone passes an object with <code class=\"language-text\">null</code> as its prototype. </p>\n<p>Consequently, to guard this problem we can use <em>function borrowing</em> technique we previously learned. The passed-in object argument can borrow <code class=\"language-text\">hasOwnProperty</code> available on Object.prototype as we previously learned via <code class=\"language-text\">call</code> method. 🚀😇.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Will not break your code if 'a' has a null prototype. ✅</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true; </span></code></pre></div>\n<hr>\n<h3>Summary</h3>\n<ul>\n<li>Every object literal inherits from <strong>Object.prototype</strong>. This allows you to invoke some of the methods available like <code class=\"language-text\">hasOwnProperty</code>. </li>\n<li>We can override/create the prototype chain with the help of <strong>Object.setPrototypeOf</strong> method and via <strong>Object.create(prototype)</strong>. </li>\n<li>Every function inherits from <strong>Function.prototype</strong> allowing you to consume methods like <code class=\"language-text\">call</code>, <code class=\"language-text\">apply</code>, and <code class=\"language-text\">bind</code>. </li>\n<li>An object can borrow other functions without implementing them or having them in their prototype chain. This can be achieved by using <code class=\"language-text\">call</code> or <code class=\"language-text\">apply</code> method available on <code class=\"language-text\">Function.prototype</code>.</li>\n<li>Use <code class=\"language-text\">Object.prototype.hasOwnProperty.call(objRef, &#39;propName&#39;)</code> to guard the <strong>TypeError</strong> when objRef has <code class=\"language-text\">null</code> prototype. </li>\n</ul>\n<p>That’s all for now. Hope you have enjoyed reading this article and learned a few things. Go and share this achievement with others 😍. </p>","frontmatter":{"title":"What's the deal with Object.prototype.hasOwnProperty.call()?","date":"April 26, 2020","description":"We will break the components into pieces and demystify their existance. You will learn about prototye delegation, borrowing function techinque, and why one would use hasOwnProperty on Object's prototype and not on instance itself."}}},"pageContext":{"slug":"/what's-the-deal-with-Object.prototype.hasOwnProperty.call()/","previous":{"fields":{"slug":"/why-effects-shouldn't-lie-about-their-dependencies/"},"frontmatter":{"title":"Why Effects shouldn't lie about their dependencies"}},"next":null}}}