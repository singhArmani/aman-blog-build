{"componentChunkName":"component---src-templates-blog-post-js","path":"/purecomponent-caveats/","result":{"data":{"site":{"siteMetadata":{"title":"Aman's Blog","author":"Amandeep Singh"}},"markdownRemark":{"id":"bdbcf052-904b-5e62-8981-e3f557816fd9","excerpt":"Extending your class components from PureComponents gives you the benefit of avoiding wasteful re-renders. It does a shallow comparison of your new props/state…","html":"<p>Extending your class components from <strong>PureComponents</strong> gives you the benefit of avoiding wasteful re-renders. It does a shallow comparison of your new props/state with previous props/state and returns true if a re-render is required; otherwise, returns false. This can be handy if you don’t want to write your own <strong>shouldComponentUpdate</strong> lifecycle hook.</p>\n<p>But, there are a few caveats associated with PureComponents and knowing them can help you write better class components. Before diving into the caveats let’s understand the shallow comparison concept for objects.</p>\n<blockquote>\n<p>Shallow comparison for objects is the process of comparing the\nreferences of the objects and returning true if they are equal.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// consider this</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> location<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>city<span class=\"token operator\">:</span> ‘Sydney’<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> location<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>city<span class=\"token operator\">:</span> ‘Sydney’<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\na <span class=\"token operator\">===</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false(references are different)</span>\n\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\na <span class=\"token operator\">===</span> c <span class=\"token comment\">//true (same reference)</span>\n\n<span class=\"token comment\">// let’s mutate the nested object</span>\na<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>city <span class=\"token operator\">=</span> ‘Melbourne’<span class=\"token punctuation\">;</span>\na <span class=\"token operator\">===</span> c <span class=\"token comment\">// true (reference is still the same)</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// false</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">===</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// false, both are different objects</span></code></pre></div>\n<p>React always loops through the props object keys and compares the value to check if they are equal or not. In case the key is an object, React won’t do a deep equality check, it will just perform a reference equality check.</p>\n<p>Now armed with the knowledge of shallow comparisons, let’s check out the pitfalls of where you may lose the benefit of extending from PureComponent.</p>\n<h3>1. Using empty or new object as a prop</h3>\n<p>Consider the following examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Inside the render method of your Parent component</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>ChildPureComponent data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>data <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Passing a new instance of an empty array like this will cause your shallow comparison to return false. An empty array creates a new reference every time our parent re-renders.</p>\n<p>To avoid this, consider creating a static reference and passing it as a prop:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Create a static reference outside of your parent</span>\n<span class=\"token comment\">// component or outside of a parent render function.</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">EMPTY_ARRAY</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Then somewhere inside your parent component render method</span>\n<span class=\"token operator\">&lt;</span>ChildPureComponent data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>data <span class=\"token operator\">||</span> <span class=\"token constant\">EMPTY_ARRAY</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>Passing a static reference for the array would make your shallow comparison return true and thus would prevent your child component re-rendering. This also applies when passing a new empty object as a prop.</p>\n<h3>2. Passing an anonymous function as a prop</h3>\n<p>Functions are nothing but objects in the JS world. A shallow comparison would operate similarly as it does on plain old JavaScript objects.</p>\n<p>Consider this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">b</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">===</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// copy the reference of a and assign it to c</span>\na <span class=\"token operator\">===</span> c <span class=\"token comment\">// true;</span></code></pre></div>\n<p>As you can see it works similarly as the POJO (plain old JavaScript object) reference equality check.</p>\n<p>Now, when you pass an anonymous function as a prop into your PureComponent, the shallow comparison of that function prop would always fail and thus cause a re-render.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Inside your Parent component render method</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>ChildPureComponent\n<span class=\"gatsby-highlight-code-line\">      handleClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>      title<span class=\"token operator\">=</span>”title”\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Our <em>handleClick</em> is always getting a new anonymous function every time your parent component renders. Even though <em>‘title’</em> is always the same, your child component would re-render unnecessarily. Shallow comparison would always fail on handleClick prop.</p>\n<p>To avoid this wasteful re-render, consider creating an instance method and passing its reference into your handleClick prop.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ParentComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* fetch data */</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildPureComponent</span></span>\n        <span class=\"token attr-name\">handleClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fetchData<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now handleClick will always refer to the same instance method, and its value won’t change when your parent re-renders.</p>\n<h3>3. Handling the case when you need to bind your function with an argument</h3>\n<p>You might come across a scenario where you need to bind an argument to your function. Especially when you iterate over an Array and create child components via the <em>map</em> function.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Inside the render method of your parent component</span>\n<span class=\"token keyword\">return</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token parameter\">el</span> <span class=\"token operator\">=></span>\n  <span class=\"token operator\">&lt;</span>ChildPureComponent\n      key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>el<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n      handleClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      title<span class=\"token operator\">=</span>“title”\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This situation can be tricky. One way to solve this problem is to use <a href=\"https://en.wikipedia.org/wiki/Memoization\">memoization</a>.</p>\n<blockquote>\n<p>Memoization is an optimization technique of storing the result of a function\nexecution into a cache and returning the cached result when the same input is passed.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Inside your parent class component</span>\n<span class=\"token comment\">// Instance method</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> getClickHandler <span class=\"token operator\">=</span> <span class=\"token function\">memoize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token parameter\">el</span> <span class=\"token operator\">=></span>\n    <span class=\"token operator\">&lt;</span>ChildPureComponent\n      key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>el<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n      handleClick<span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClickHandler</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      title<span class=\"token operator\">=</span>“title”\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now every time the same input (key) is passed, getClickHandler will return the same reference for your function, which means your <em>‘handleClick’</em> prop will <strong>pass</strong> the shallow comparison check inside your child component.</p>\n<p>Depending upon which library you use (or you can implement your own memoization), just be mindful that memoization trades memory for speed.</p>\n<p>Hope this was helpful. Happy coding 😃.</p>","frontmatter":{"title":"PureComponent Caveats","date":"October 28, 2018","description":"Avoid wasteful re-renders."}}},"pageContext":{"slug":"/purecomponent-caveats/","previous":{"fields":{"slug":"/thinking-in-react/"},"frontmatter":{"title":"Thinking in React—few tips"}},"next":{"fields":{"slug":"/how-to-write-cleaner-code-with-hooks/"},"frontmatter":{"title":"How to write 90% cleaner code with Hooks 🎣"}}}},"staticQueryHashes":["426816048","63159454"]}