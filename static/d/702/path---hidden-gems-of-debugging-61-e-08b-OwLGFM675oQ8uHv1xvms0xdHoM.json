{"data":{"site":{"siteMetadata":{"title":"Aman's Blog","author":"Amandeep Singh"}},"markdownRemark":{"id":"e498931c-36c9-57f3-9cf2-9dd913f219c7","excerpt":"Anything that cut some of your arduous task time is good for your productivity. Debugging is one of that task. Developers strive to write bug-free code; but we‚Ä¶","html":"<p>Anything that cut some of your arduous task time is good for your productivity. Debugging is one of that task. Developers strive to write bug-free code; but we all know that this is far from true. No one likes to see bugs in their code‚Äîthose red colors lines are not very appealing, right? Nonetheless, errors are good if you happen to catch them early, and debug them properly will give you a new learning and sense of satisfaction. There were countless time when I learned a lot while debugging some of my own code and seeing how it could challenge my own concepts.</p>\n<p>We learn by making mistakes, and make mistakes again to learn more. Enough of motivation. Let‚Äôs get to business.</p>\n<p>Today, I am going to share some of the tricks and tips you could use to supercharge your debugging skills. I‚Äôve only tried these tricks in chrome dev tools (sorry FireFox users), but some of them are browser agnostic.</p>\n<h3>1. Using <a href=\"https://alligator.io/js/object-property-shorthand-es6/\">shorthand object</a> property notation in console.log</h3>\n<p>This is my favourite <em>console.log</em> trick and has to be on top of the list :). You must have written torrents of <em>console</em> statements in your code base trying to figure out the value of a varible. Convenience has made <strong>console</strong> the leader of the debugging championship üèÜ. The golden line looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptu\"><pre class=\"language-javascriptu\"><code class=\"language-javascriptu\"> console.log(a);</code></pre></div>\n<br>\nThis is awesome and you get to open up your dev tool and see the value. But, as the number of lines grow, it becomes hard to trace the reference of that particular value.\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 20</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 30</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 40</span>\n\n<span class=\"token comment\">// Sorry what was the reference variable for '30'? I am kind of lostüòï</span></code></pre></div>\n<br>\n<p>A very obvious solution to this would be to dump in some string representation along with your variable. Thanks to the versatile nature of <strong>console</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints a 20</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints b 30</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints c 40</span></code></pre></div>\n<br>\n<p>But as I said, we need to cut time and write less lines to be more efficient and productive, right? So, the trick is to wrap your variable inside the curly ‚Äô{}‚Äô braces.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> a <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints { a: 20 };</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> b <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints { b: 30 };</span></code></pre></div>\n<br>\n<blockquote>\n<p>Bonus: Use ‚Äòvar‚Äô instead of ‚Äòconst‚Äô or ‚Äòlet‚Äô when declaring variables inside your chrome‚Äôs console tab to avoid annoying <strong>Syntax Error</strong>. ‚Äòvar‚Äô is your scratchpad buddy.</p>\n</blockquote>\n<h1># No more wrapping of curly braces for fat <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">arrow</a> functions</h1>\n<p> You must have used <strong>fat arrow</strong> function by now (if you haven‚Äôt, you should start using it). They are short and precise and omit the requirement of the curly braces and ‚Äòreturn‚Äô statement when writing your function definition. This is awesome.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">   <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> x <span class=\"token operator\">=></span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// how awesome is that üòä</span></code></pre></div>\n<br>\n<p>A popular use case would be inside the array utility callbacks (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#\">map</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#\">filter</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#\">reduce</a>, etc)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">   <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> newArr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>el <span class=\"token operator\">=></span> el <span class=\"token operator\">*</span> el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 4, 9]</span></code></pre></div>\n<br>\n<p>Let say, if you want to debug the map callback function, how would you go about printing the <em>el</em> value? A simple answer would be to refactor the callback and throw in some curly braces around and inject return statemenet :(.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> newArr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>el <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> el <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// print {el: 1}, {el: 2}, {el: 3}</span>\n <span class=\"token keyword\">return</span> el <span class=\"token operator\">*</span> el<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<p>What! are you kidding me üôà? This is not ideal. Not only it‚Äôs time consuming, but reverting back will consume more time too. A better solution is to use our good old friend‚Äî<em>console.log</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">   <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> newArr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>el <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> el <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>  el <span class=\"token operator\">*</span> el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// print {el: 1}, {el: 2}, {el: 3}</span></code></pre></div>\n<br>\n<p>Whoa, what was that? Don‚Äôt worry, it‚Äôs just JavaScript. I‚Äôll explain:</p>\n<p>There are two things going on here:</p>\n<ul>\n<li><em>console.log</em> always returns <strong>undefined</strong> which is a <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\">falsy value</a>.</li>\n<li>Given a statement like <em>expr1 || expr2</em>,  <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Logical\">Logical OR operator</a> ||, returns <em>expr1</em> if it can be converted to <strong>true</strong>; otherwise, returns <em>expr2</em>.</li>\n</ul>\n<p>So, return value of <em>console.log({ el })</em> was <strong>undefined</strong> and thus second expression <em>el * el</em> was executed. The beauty about this change is that you get to see the value <strong>inline</strong>. No debugger or cumbersome <em>curly</em> ceremony is required. A big win, right? üòä</p>\n<p>This is very handy when you are a fan of functional programming and use libray like <a href=\"https://ramdajs.com/\">Ramda</a>.</p>\n<h1>Add logpoints‚Äîless sprinkling of console.log in your code</h1>\n<p>The <em>console.log</em> has become an indespensible part of our debugging journey. We tend to sprinkle it everywhere in our code; it has become our first line of defence against bugs.\nThe problem is the cleanup time consumption. You can obviously go and find each console statement and remove them manually. But what if I say there‚Äôs a better solution? Embrace new kid in the town‚Äî<strong>The logpoint</strong>.</p>\n<p>Google has added this <a href=\"https://developers.google.com/web/updates/2019/01/devtools\">feature</a> in Chrome 73. It allows you to add console statement in your <strong>source</strong> code straight from your dev tool.</p>\n<p>Action speaks louder than words:</p>\n<p><img src=\"/add_logpoints-73ed58323852eaac589cdc1381e6204f.gif\" alt=\"add log points\"></p>\n<blockquote>\n<p>Bonus: You can also use conditional breakpoint feature to insert a breakpoint when condition evaluates to true.</p>\n</blockquote>\n<h1># Store and copying</h1>\n<p>Chrome dev tool is where I spend most of my time debugging and using it as my scratch pad. It has lots of in-built features at our disposal. One of the cool feauture I lately discovered and have been so helpful is copying the variable value into my clipboard.\nTo copy any reference variable into your clipboard just type **copy(variableName) and hit enter. You can paste or save it for future reference.</p>\n<p>The big benefit comes into picture when you are playing around with network response.It‚Äôs the feature to store variable as global variable.\nOpening up the preview section of your network tab and right clicking the property name will show you a menu item list. You can go ahead and store it as a global variable. The variable will be shown in your console tab, and you can use copy() function to have it in your clipboard :)\nThis also become quite useful when you combine it with console.log({ } ) trick I showed you above. Kill two birds with one stone.</p>\n<blockquote>\n<p>Bonus: You can use ‚ÄòCtrl + f‚Äô to search for a particular string match over the entire response object in the preview section.</p>\n</blockquote>\n<p><img src=\"/store_copy-5f6a31dea0bdee0e1378be3ca8aca878.gif\" alt=\"store as global variable and then use copy command\"></p>\n<h1># Break point for your network requests</h1>\n<p>Ideally, you should strive to keep your HTTP requests as minimun as possible while building your client. Not only it gives you a smooth performance, but also helps to avoid bugs.</p>\n<p>In one of our project at Insurance Company, we were building a data-driven UI. Every next question in the form was driven by the user‚Äôs previous actions and was fetched subsequently over the wire.\nConsequently, we needed to analyse that when a particular kind of request was triggered, so that we could debug the request body payload accurately. I ended up finding this awesome solution called <em>XHR/fetch Breakpoints</em>. It allowed me to put a conditional breakpoint on my fetch requests.</p>\n<p>XHR Breakpoints allow you to put breakpoints on all of your network request. But the real power is the ability to apply breakpoint via ‚ÄòURL contains‚Äô section. You can throw in any keyword there and chrome will put a pause when it encounters the reqeust url containing the matching word. How awesome is that!!</p>\n<p>Open <strong>Sources</strong> tab of your dev tool and on the right side panel, you should see <strong>XHR/fetch Breakpoint</strong> section below <strong>Breakpoints</strong>. Hit <strong>+</strong> button and a input box should come up asking you to enter the keyword. Enter your keyword and hit enter.</p>\n<p><img src=\"/fetch_breakpoint-785129b685e3acf6c69d00b49053228d.gif\" alt=\"fetch breakpoint\"></p>\n<h1># Copying your request as cURL</h1>\n<p>This is handy when you want to trigger you request from a command line too like cmd or bash. You can also paste the copied link into your postman app and it will fill up all the request headers for you. Very handy in visualizing your reqeust.</p>\n<ul>\n<li>Open you <em>Network</em> tab inside your chrome dev tool.</li>\n<li>Locate the request you want to copy and right click to bring multiple options.</li>\n<li>Hovering over the <em>Copy</em> options will show you list of differnt format you can copy your request as.</li>\n<li>Select <em>Copy as cURL</em> and it will be saved into your clipboard.</li>\n</ul>\n<p><img src=\"/copy_as_curl-cf96e4b8962d23707bc5717b833a01d1.gif\" alt=\"copy as cURL\"></p>\n<h1># Don‚Äôt let go off your CSS changes‚Äîpersist styling when refresh</h1>\n<p>This tip is dedicated to our UI/Designers friends. We know that via <em>Styles</em> section of <strong>Elements</strong> tab, we can modify the css. But these changes don‚Äôt persist when you refresh the page. If you wish to persist the modification you made to the existing stylesheet, you can do this via following steps:</p>\n<ul>\n<li>Open Sources tab and select <em>Overrides</em></li>\n<li>Click <em>Select folder for overrides</em> and select a folder where you want to save your changes.</li>\n<li>A permission dialogue would pop up asking for permission. Go ahead and allow.</li>\n<li>Select your folder and you are all set to rock ‚Äòn‚Äô roll.</li>\n</ul>\n<p>Now everytime you make changes to your existing styles, they won‚Äôt disappear even when you refresh the page :)\n<em>Note</em>: Adding new style changes won‚Äôt persist though!.</p>\n<hr>\n<h1>Final thougths</h1>\n<p>You can‚Äôt change the fact that it‚Äôs practically impossible to write a 100% bug free code. Rather than slamming your head against your desk, let‚Äôs adapt and develop our debugging skills. Believe me you will learn a lot by exploring the root causes of your bugs.</p>\n<p>I hope you‚Äôve enjoyed reading this article. Go and <del>kill</del> remove some bugs now üêû.</p>","frontmatter":{"title":"Hidden gems of debugging üíé","date":"May 25, 2019","description":"We will explore some of the coolest tricks and features that can make 'debugging' your cup of tea ‚òï."}}},"pageContext":{"slug":"/hidden-gems-of-debugging/","previous":{"fields":{"slug":"/lexical-envrionment-the hidden-part-to-understand-closures/"},"frontmatter":{"title":"Lexical Environment-the hidden part to understand Closures"}},"next":null}}