{"data":{"site":{"siteMetadata":{"title":"Aman's Blog","author":"Amandeep Singh"}},"markdownRemark":{"id":"cb1e5b0c-e344-517d-92c8-c68c2ab7c388","excerpt":"We all know that in order to pass a function as props to the child component we have to do one of the following: Bind it inside the constructor function. Bind…","html":"<p>We all know that in order to pass a function as props to the child component we have to do one of the following:</p>\n<ul>\n<li>Bind it inside the constructor function.</li>\n<li>Bind it inline (which can have some performance issues).</li>\n<li>Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\"><em>arrow function</em></a> (which is the same as <a href=\"https://babeljs.io/docs/en/babel-plugin-proposal-class-properties\"><em>property initializer</em></a> syntax).</li>\n</ul>\n<p>Have you ever wondered why it has to be this way? Why we have to do this extra piece of work?</p>\n<p>Through this article, I will first try to explain the binding inside the constructor function. Once we acquire that knowledge, we will try to answer that why arrow functions don’t follow the same ceremony.</p>\n<p>One thing we need to know that binding in the constructor has nothing to do with React. It’s purely related to how JavaScript implements <strong>this</strong>. Let’s look at the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token punctuation\">:</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span>\n  getX<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 90</span>\n\n<span class=\"token keyword\">let</span> xGetter <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">.</span>getX<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">xGetter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 10;</span></code></pre></div>\n<p>When we initialised <em>x</em> into a global scope, it becomes the property of the <em>window</em> object (assuming that it’s a browser environment and not a strict mode). We can assert that:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span>x <span class=\"token operator\">===</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<br/>\n<p><strong>this</strong> will always point to the object onto which the method was invoked. So, in the case of <em>foo.getX()</em>, <strong>this</strong> points to <em>foo</em> object returning us the value of 90. Whereas in the case of <em>xGetter()</em>, <strong>this</strong> points to <em>window</em> object returning us the value of 10.</p>\n<p>To retrieve the value of <em>foo.x</em>, we can create a new function by binding the value of <strong>this</strong> to <em>foo</em> object using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\">Function.prototype.bind</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> getFooX <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">.</span>getX<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">getFooX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 90</span></code></pre></div>\n<br/>\n<p>Armed with this knowledge, let’s try to understand what happens when you pass a function prop into the child component.</p>\n<p>In the following code example, we have created a dummy <em>class</em> component to mimic React Component mental model. Inside the <em>render</em> function, we are returning a plain JS object which has a functional prop called <em>‘onClick’</em>.</p>\n<blockquote>\n<p>The <a href=\"https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html#elements-describe-the-tree\">React element</a> is just an immutable description object with\ntwo fields: type: (string | ReactClass) and props: Object</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setState</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'state'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// return a child component.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span>\n      props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// pass functional props</span>\n        onClick<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">,</span>\n        children<span class=\"token punctuation\">:</span> <span class=\"token string\">'Click Me'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 1. creating a component instance</span>\n<span class=\"token keyword\">const</span> componentInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2. calling a render method on the instance</span>\n<span class=\"token comment\">// ( In reality, React does the same thing for your class components)</span>\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> componentInstance<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 3. calling the onClick function, which was passed as a  prop,</span>\n<span class=\"token comment\">// will throw a 'TypeError: this.setState is not a function'.</span>\nelement<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<p>This TypeError is obvious now because this is pointing to the <em>props</em> object which doesn’t know the existence of any setState function. The <em>setState</em> function is only a property of <em>componentInstance</em>.</p>\n<p>So, to fix this problem, we have to bind the handleClick function inside the constructor:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// inside constructor function</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  …\n  <span class=\"token comment\">// bind returns a new function</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token comment\">// calling onClick will print 'state' this time.</span>\nelement<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<p>Now, the value of <strong>this</strong> will always point to <em>componentInstance</em> which has <em>setState</em> as one of its property and it will not throw any TypeError.</p>\n<hr>\n<p>Now, that was the answer to our first question. It’s a good progress so far. Moving forward, we shall try to find out the answer to our second question.</p>\n<p>Looking at the code below:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> someMethod<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nbar<span class=\"token punctuation\">.</span><span class=\"token function\">someMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// print {someMethod: f}</span>\n\n<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> someMethod<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">someMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints global 'window' object</span></code></pre></div>\n<br/>\n<p>shows that arrow function has no this of their own. It is always determined by the scope surrounding the arrow function when it was created.</p>\n<p>When we use an <em>arrow</em> function inside our class (using <a href=\"https://babeljs.io/docs/en/babel-plugin-proposal-class-properties\">property initializer</a> feature), it becomes the method property of the instance. As <strong>this</strong> will always be determined by the outer scope, it will point to the <em>instance</em> of the class. Let’s see that in action:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setState</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'state'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// using fat arrow function; no binding require inside constructor</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// this will now point to the instance of Component class which knows about the setState method property</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// return a child component.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span>\n      props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// pass functional props</span>\n        onClick<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">,</span>\n        children<span class=\"token punctuation\">:</span> <span class=\"token string\">'Click Me'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 1. creating a component instance</span>\n<span class=\"token keyword\">const</span> componenttInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//  2. calling a render method on the instance ( In reality, React does the same thing for your class components)</span>\n\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> componenttInstance<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 3. calling onClick will now print 'state' to the console.</span>\nelement<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<p>I hope you have enjoyed reading this article and now will be able to answer the question confidently. I highly recommend reading this <a href=\"http://2ality.com/2017/12/alternate-this.html\">article</a> by <a href=\"https://twitter.com/rauschma\">Dr Axel Rauschmayer</a> for a more detailed description of how this works.</p>\n<p>Thank you for reading and happy coding 😃.</p>","frontmatter":{"title":"Why do we need to bind methods inside our component’s constructor?","date":"December 12, 2018","description":"This is not React but JavaScript."}}},"pageContext":{"slug":"/why-do-we-need-to-bind-methods-inside-out-component's-constructor/","previous":{"fields":{"slug":"/how-to-write-cleaner-code-with-hooks/"},"frontmatter":{"title":"How to write 90% cleaner code with Hooks 🎣"}},"next":{"fields":{"slug":"/so-you-think-you-know-JavaScript/"},"frontmatter":{"title":"So you think you know JavaScript?"}}}}